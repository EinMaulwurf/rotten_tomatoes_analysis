---
title: "movies"
format: html
---

## Setup
```{r, message=FALSE}
library(tidyverse)
library(vroom)

library(progress)
library(httr2)
library(jsonlite)

readRenviron(".env")
api_key <- Sys.getenv("api_key")

base_url <- "https://mdblist.com/api/?"

options(max.print=50)
```

Getting data from 

[mdblist](mdblist.com)

Limits
```{r}
# API endpoint for checking limits
url <- "https://mdblist.com/api/user/?apikey=fbi8aymrfprksp7xxna0s28dw"

# Make the GET request
response <- GET(url)

# Parse the JSON response
limits <- fromJSON(rawToChar(response$content))

# Print the limits
print(limits)
```


## Example: Get info on jaws movie, IMDB id: tt0073195
https://mdblist.com/api/?apikey=fbi8aymrfprksp7xxna0s28dw&i=tt0073195
```{r}
# Define the URL
imdb_id <- "tt0073195"

full_url <- paste0(base_url, "apikey=", api_key, "&i=", imdb_id)

# Make the GET request
response <- request(full_url) %>%
    req_retry(max_tries = 3) %>%
    req_perform()

# Parse the JSON response
data <- response %>%
  resp_body_raw() %>%
  rawToChar() %>%
  fromJSON()

# Print the data
# print(data)

# Get rating diffence
data$ratings %>%
  filter(source %in% c("tomatoes", "tomatoesaudience")) %>%
  select(source, value) %>%
  pivot_wider(names_from = source, values_from = value)
```

## Get list of movies to check
```{r}
imdb_raw <- vroom("/Users/sebastiangeis/Downloads/title.basics.tsv", delim = "\t", na = "\\N") 
imdb_ratings <- vroom("/Users/sebastiangeis/Downloads/title.ratings.tsv", delim = "\t", na = "\\N")

imdb_filtered <- imdb_raw %>%
  filter(titleType == "movie",
         as.numeric(startYear) > 2000,
         !is.na(runtimeMinutes)) %>%
  left_join(imdb_ratings, by = "tconst") %>%
  filter(numVotes > 10000) %>%
  mutate(genres = str_split(genres, ",")) %>%
  select(-endYear, -titleType, -isAdult)

imdb_filtered
```

Save to .rds / read from .rds
```{r}
# write_rds(imdb_filtered, "./data/imdb_filtered.rds")

imdb_filtered <- read_rds("./data/imdb_filtered.rds")
```


## API requests
Error may occur when too many requests were done:
```
> print(data)
$response
[1] FALSE

$error
[1] "API Limit Reached!"
```
```{r}
imdb_tomatoes <- imdb_filtered %>%
  mutate(tomatoes = -1,
         tomatoesaudience = -1)

imdb_ids <- imdb_tomatoes %>% pull(tconst)
response_list <- list()

# Setting up progress bar
pb <- progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || ETA: :eta]",
                       total = length(imdb_ids),
                       clear = FALSE)

for(i in 1:length(imdb_ids)) {
  pb$tick()
  
  id <- imdb_ids[i]
  full_url <- paste0(base_url, "apikey=", api_key, "&i=", id)
  
  # Make the GET request
  response_list[[i]] <- request(full_url) %>%
    req_retry(max_tries = 3) %>%
    req_perform()
}

#write_rds(response_list, "./data/response_list.rds")
```

### Extract data from response_list
Loop appraoch
```{r}
for(i in 1:length(imdb_ids)) {
  data <- response_list[[i]] %>%
    resp_body_raw() %>%
    rawToChar() %>%
    fromJSON()
  
  try({
    imdb_tomatoes$tomatoes[i] <- data$ratings %>%
      filter(source == "tomatoes") %>%
      pull(value)
    
    imdb_tomatoes$tomatoesaudience[i] <- data$ratings %>%
      filter(source == "tomatoesaudience") %>%
      pull(value)
  })
}
```

Tidyverse / purrr approach
```{r}
converted_data <- response_list %>%
  map(~ .x %>%
        resp_body_raw() %>%
        rawToChar() %>%
        fromJSON()) %>%
  keep(~ .x$response == TRUE)

converted_data
```


```{r}
responses[[1]]$content

fromJSON(rawToChar(response_list[[1]]$content))$ratings

response_list[[1]] %>%
  resp_body_raw() %>%
  rawToChar() %>%
  fromJSON()

response_list %>%
  resp_body_raw() %>%
  fromJSON()
```

## Analysis
All genres
```{r}
imdb_genres <- imdb_tomatoes %>%
  pull(genres) %>%
  unlist() %>%
  unique()

imdb_genres
```


```{r}
genres_long <- imdb_tomatoes %>%
  select(- tconst, -primaryTitle, -averageRating, -runtimeMinutes, -numVotes, -startYear) %>%
  mutate(tomatoes_diff = tomatoes - tomatoesaudience) %>%
  unnest_longer(col = genres) %>%
  filter(!is.na(tomatoes_diff)) %>%
  mutate(genres = factor(genres),
         genres = fct_reorder(genres, tomatoes_diff, mean)) %>%
  left_join(imdb_tomatoes %>%
              select(genres) %>%
              unnest_longer(col = genres) %>%
              count(genres),
            by = "genres") %>%
  filter(n > 10)

genres_long %>%
  ggplot(aes(x = tomatoes_diff, y = genres, color = genres, group = genres))+
  #geom_point(alpha = .4)+
  geom_boxplot()+
  theme_bw()+
  theme(legend.position = "none")+
  labs(y = "Genre", x = "Tomatoes Difference = Tomatoers - Audience",
       subtitle = "Positive x: Tomatoers liked movie more than audience.")
```

Regression
```{r}
genres_long %>%
  lm(tomatoes_diff ~ genres, data = .) %>%
  summary()
```

