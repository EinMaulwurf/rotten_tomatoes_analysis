---
title: "movies"
format: html
---

## Setup
```{r, message=FALSE}
library(tidyverse)
library(vroom)

library(progress)
library(httr)
library(jsonlite)

readRenviron(".env")
api_key <- Sys.getenv("api_key_2")

base_url <- "https://mdblist.com/api/?"
```

Getting data from 

[mdblist](mdblist.com)

Limits
```{r}
# API endpoint for checking limits
url <- "https://mdblist.com/api/user/?apikey=fbi8aymrfprksp7xxna0s28dw"

# Make the GET request
response <- GET(url)

# Parse the JSON response
limits <- fromJSON(rawToChar(response$content))

# Print the limits
print(limits)
```


## Example: Get info on jaws movie, IMDB id: tt0073195
https://mdblist.com/api/?apikey=fbi8aymrfprksp7xxna0s28dw&i=tt0073195
```{r}
# Define the URL
imdb_id <- "tt0073195"

full_url <- paste0(base_url, "apikey=", api_key, "&i=", imdb_id)

# Make the GET request
response <- GET(full_url)

# Parse the JSON response
data <- fromJSON(rawToChar(response$content))

# Print the data
#print(data)

# Get rating diffence
data$ratings %>%
  filter(source %in% c("tomatoes", "tomatoesaudience")) %>%
  select(source, value) %>%
  pivot_wider(names_from = source, values_from = value)

# Get other attributes
```

## Get list of movies to check
```{r}
imdb_raw <- vroom("/Users/sebastiangeis/Downloads/title.basics.tsv", delim = "\t", na = "\\N") 
imdb_ratings <- vroom("/Users/sebastiangeis/Downloads/title.ratings.tsv", delim = "\t", na = "\\N")

imdb_filtered <- imdb_raw %>%
  filter(titleType == "movie",
         as.numeric(startYear) > 2000,
         !is.na(runtimeMinutes)) %>%
  left_join(imdb_ratings, by = "tconst") %>%
  filter(numVotes > 10000) %>%
  mutate(genres = str_split(genres, ",")) %>%
  select(-endYear, -titleType, -isAdult)

imdb_filtered
```

Save to .rds / read from .rds
```{r}
# write_rds(imdb_filtered, "./data/imdb_filtered.rds")

imdb_filtered <- read_rds("./data/imdb_filtered.rds")
```


## API requests

Error may occur:

```
> print(data)
$response
[1] FALSE

$error
[1] "API Limit Reached!"
```

```{r}
set.seed(123)
imdb_tomatoes <- imdb_filtered %>%
  mutate(tomatoes = -1,
         tomatoesaudience = -1)# %>%
  #slice_sample(n = 5)

imdb_ids <- imdb_tomatoes %>% pull(tconst)

# Setting up progress bar
pb <- progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || ETA: :eta]",
                       total = length(imdb_ids),
                       clear = FALSE)

for(i in 1:length(imdb_ids)) {
  pb$tick()
  
  id <- imdb_ids[i]
  full_url <- paste0(base_url, "apikey=", api_key, "&i=", id)
  
  repeat{
    # Make the GET request
    try(
      response <- RETRY("GET", full_url)
    )
    
    # Parse the JSON response
    data <- fromJSON(rawToChar(response$content))
    
    # Check if request was correct
    if(data$response){
      break
    } else {
      Sys.sleep(60)
    }
  }

  # Print the data
  #print(data)
  
  # Get rating values
  try({
    imdb_tomatoes$tomatoes[i] <- data$ratings %>%
      filter(source == "tomatoes") %>%
      pull(value)
    
    imdb_tomatoes$tomatoesaudience[i] <- data$ratings %>%
      filter(source == "tomatoesaudience") %>%
      pull(value)
  }, silent = FALSE)

}

imdb_tomatoes

# write_rds(imdb_tomatoes, "./data/imdb_tomatoes.rds")
# imdb_tomatoes <- read_rds("./data/imdb_tomatoes.rds")
```

```{r}
set.seed(123)
imdb_tomatoes <- imdb_filtered %>%
  mutate(tomatoes = -1,
         tomatoesaudience = -1) %>%
  slice_sample(n = 1000)

imdb_ids <- imdb_tomatoes %>% pull(tconst)
response_list <- list()
data_list <- list()

# Setting up progress bar
pb <- progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || ETA: :eta]",
                       total = length(imdb_ids),
                       clear = FALSE)

for(i in 1:length(imdb_ids)) {
  pb$tick()
  
  id <- imdb_ids[i]
  full_url <- paste0(base_url, "apikey=", api_key, "&i=", id)
  
  # Make the GET request
  repeat{
    response_list[[i]] <- RETRY("GET", full_url)
    data_list[[i]] <- fromJSON(rawToChar(responses[[i]]$content))
    
    if(data_list[[i]]$response){
      break
    } else {
      print("Rate Limit")
      Sys.sleep(60)
    }
  }
}
```

```{r}
imdb_tomatoes

for(i in 1:length(imdb_ids)) {
  data <- fromJSON(rawToChar(responses[[i]]$content))
  
  try({
    imdb_tomatoes$tomatoes[i] <- data$ratings %>%
      filter(source == "tomatoes") %>%
      pull(value)
    
    imdb_tomatoes$tomatoesaudience[i] <- data$ratings %>%
      filter(source == "tomatoesaudience") %>%
      pull(value)
  }, silent = FALSE)
}

imdb_tomatoes
```


```{r}
responses[[1]]$content

fromJSON(rawToChar(responses[[1]]$content))$ratings
```


```{r}
full_url <- paste0(base_url, "apikey=", api_key, "&i=", "tt15239678")

# Make the GET request
#response <- GET(full_url)
response <- RETRY("GET", full_url)

# Parse the JSON response
data <- fromJSON(rawToChar(response$content))

# Print the data
print(data)

data$ratings %>%
    filter(source == "tomatoes") %>%
    pull(value)

data$ratings %>%
    filter(source == "tomatoesaudience") %>%
    pull(value)
```

## Analysis
All genres
```{r}
imdb_genres <- imdb_tomatoes %>%
  pull(genres) %>%
  unlist() %>%
  unique()

imdb_genres
```


```{r}
test <- imdb_tomatoes %>%
  select(- tconst, -primaryTitle, -averageRating, -runtimeMinutes, -numVotes, -startYear) %>%
  mutate(tomatoes_diff = tomatoes - tomatoesaudience) %>%
  unnest_longer(col = genres) %>%
  filter(!is.na(tomatoes_diff)) %>%
  mutate(genres = factor(genres),
         genres = fct_reorder(genres, tomatoes_diff, mean)) %>%
  left_join(imdb_tomatoes %>%
              select(genres) %>%
              unnest_longer(col = genres) %>%
              count(genres),
            by = "genres") %>%
  filter(n > 10)

test %>%
  lm(tomatoes_diff ~ genres, data = .) %>%
  summary()

test %>%
  ggplot(aes(x = tomatoes_diff, y = genres, color = genres, group = genres))+
  #geom_point(alpha = .4)+
  geom_boxplot()+
  theme_bw()+
  theme(legend.position = "none")+
  labs(y = "Genre", x = "Tomatoes Difference = Tomatoers - Audience",
       subtitle = "Positive x: Tomatoers liked movie more than audience.")
```

