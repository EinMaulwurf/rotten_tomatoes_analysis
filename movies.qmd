---
title: "movies"
format: html
---

## Setup
```{r, message=FALSE}
library(tidyverse)
library(vroom)

library(progress)
library(httr2)
library(jsonlite)

readRenviron(".env")
api_key <- Sys.getenv("api_key")

base_url <- "https://mdblist.com/api/?"

options(max.print=50)
```

Getting data from 

[mdblist](mdblist.com)

Limits
```{r}
# API endpoint for checking limits
url <- "https://mdblist.com/api/user/?apikey=fbi8aymrfprksp7xxna0s28dw"

# Make the GET request
response <- GET(url)

# Parse the JSON response
limits <- fromJSON(rawToChar(response$content))

# Print the limits
print(limits)
```


## Example: Get info on jaws movie, IMDB id: tt0073195
https://mdblist.com/api/?apikey=fbi8aymrfprksp7xxna0s28dw&i=tt0073195
```{r}
# Define the URL
imdb_id <- "tt0073195"

full_url <- paste0(base_url, "apikey=", api_key, "&i=", imdb_id)

# Make the GET request
response <- request(full_url) %>%
    req_retry(max_tries = 3) %>%
    req_perform()

# Parse the JSON response
data <- response %>%
  resp_body_raw() %>%
  rawToChar() %>%
  fromJSON()

# Print the data
# print(data)

# Get rating diffence
data$ratings %>%
  filter(source %in% c("tomatoes", "tomatoesaudience")) %>%
  select(source, value) %>%
  pivot_wider(names_from = source, values_from = value)
```

## Get list of movies to check
From (IMDb Non-Commercial Datasets)[https://developer.imdb.com/non-commercial-datasets/]
```{r}
imdb_raw <- vroom("./data/title.basics.tsv", delim = "\t", na = "\\N") 
imdb_ratings <- vroom("./data/title.ratings.tsv", delim = "\t", na = "\\N")

imdb_filtered <- imdb_raw %>%
  filter(titleType == "movie",
         as.numeric(startYear) >= 1980,
         as.numeric(startYear) < 2024,
         !is.na(runtimeMinutes)) %>%
  left_join(imdb_ratings, by = "tconst") %>%
  filter(numVotes > 10000) %>%
  mutate(genres = str_split(genres, ",")) %>%
  select(-endYear, -titleType, -isAdult)

imdb_filtered

imdb_filtered %>%
  pull(numVotes) %>%
  quantile(probs = seq(0.1, 0.9, by = 0.1))

imdb_filtered %>%
  group_by(startYear) %>%
  count() %>%
  ggplot(aes(x = startYear, y = n))+
  geom_line()
```

Save to .rds / read from .rds
```{r}
# write_rds(imdb_filtered, "./data/imdb_filtered.rds")

imdb_filtered <- read_rds("./data/imdb_filtered.rds")
```


## API requests
Error may occur when too many requests were done:
```
> print(data)
$response
[1] FALSE

$error
[1] "API Limit Reached!"
```

Using loop
```{r}
imdb_tomatoes <- imdb_filtered %>%
  mutate(rating = "NR",
         tomatoes = -1,
         tomatoesaudience = -1)

imdb_ids <- imdb_tomatoes %>% pull(tconst)
full_urls <- paste0(base_url, "apikey=", api_key, "&i=", imdb_ids)

response_list <- list()

# Setting up progress bar
pb <- progress_bar$new(format = "(:spin) :percent [:current/:total || Time: :elapsedfull || ETA: :eta]",
                       total = length(full_urls),
                       clear = FALSE)

for(i in 1:length(full_urls)) {
  pb$tick()
  
  # Make the GET request
  response_list[[i]] <- request(full_urls[i]) %>%
    req_retry(max_tries = 3) %>%
    req_perform()
}

#write_rds(response_list, "./data/response_list.rds", compress = "gz")
```

> Careful! The resulting `response_list` is shorter than it should be!
> Therefore, matching via the imdb-id is required!

```{r}
response_list <- read_rds("./data/response_list.rds")
```


### Extract data from response_list
Because of different lengths, extract data from `response_list` without adding it directly to the IMDB data, but rather match it using the ID.
```{r}
# Convert raw API response and drop all failed responses
converted_data <- response_list %>%
  map(~ .x %>%
        resp_body_raw() %>%
        rawToChar() %>%
        fromJSON()) %>%
  keep(~ .x$response == TRUE)

# Extract values from converted_data
imdb_id <- converted_data %>%
  map_chr(~.x$imdbid)

rating <- converted_data %>%
  purrr::map_chr(~.x$certification)

tomatoes_critics <- converted_data %>%
  map_dbl(~.x$ratings %>%
    filter(source == "tomatoes") %>%
    pull(value))

tomatoes_audience <- converted_data %>%
  map_dbl(~.x$ratings %>%
    filter(source == "tomatoesaudience") %>%
    pull(value))

# Combine to data frame and match to imdb data
imdb_tomatoes <- tibble(imdb_id, rating, tomatoes_critics, tomatoes_audience) %>%
  right_join(imdb_filtered, by = c("imdb_id" = "tconst"))
```

```{r}
# write_rds(imdb_tomatoes, "./data/imdb_tomatoes.rds")
imdb_tomatoes <- read_rds("./data/imdb_tomatoes.rds")
```

## Analysis
Creating list of genres and counting genre occurences.
```{r}
# Unique genres
imdb_genres <- imdb_tomatoes %>%
  pull(genres) %>%
  unlist() %>%
  unique()

imdb_genres

# Count of genres
imdb_tomatoes %>%
  unnest_longer(genres) %>%
  count(genres) %>%
  arrange(desc(n))
```

### Plotting
Boxplot
```{r, fig.width=5, fig.height=4}
genres_long <- imdb_tomatoes %>%
  select(- imdb_id, -primaryTitle, -averageRating, -runtimeMinutes, -numVotes) %>%
  mutate(tomatoes_diff = tomatoes_critics - tomatoes_audience) %>%
  unnest_longer(col = genres) %>%
  filter(!is.na(tomatoes_diff)) %>%
  mutate(genres = fct(genres)) %>%
  left_join(imdb_tomatoes %>%
              select(genres) %>%
              unnest_longer(col = genres) %>%
              count(genres),
            by = "genres")

genres_long %>%
  filter(n > 1000) %>%
  mutate(genres = fct_reorder(genres, tomatoes_diff, median),
         genres_n = paste0(genres, " \n (n=", n, ")") %>% 
           fct(.) %>% 
           fct_reorder(tomatoes_diff, median)) %>%
  ggplot(aes(x = tomatoes_diff, y = genres_n, color = genres, group = genres))+
  #geom_point(alpha = .01)+
  geom_boxplot(outliers = FALSE)+
  theme_bw()+
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5))+
  labs(y = "Genre", x = "Score Difference = Critics - Audience",
       title = "Rotten Tomatoes rating difference by movie genre")

ggsave("./plots/rt_genre_boxplot.png", width = 5, height = 4)
```

Density
```{r, fig.width=5, fig.height=4}
imdb_tomatoes %>%
  select(Critics = tomatoes, Audience = tomatoesaudience) %>%
  drop_na() %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x = value, color = name, fill = name))+
  geom_density(alpha = .5)+
  theme_bw()+
  theme(legend.title = element_blank(),
        legend.position = "top",
        legend.background = element_blank(),
        plot.title = element_text(hjust = 0.5))+
  labs(x = "Score", y = element_blank(),
       title = "Rotten Tomatoes rating distributions")

ggsave("./plots/rt_rating_distribution.png", width = 5, height = 4)
```

Score over the years
```{r, fig.width=5, fig.height=4}
imdb_tomatoes %>%
  select(startYear, Critics = tomatoes, Audience = tomatoesaudience) %>%
  summarise(Critics = mean(Critics, na.rm = TRUE),
            Audience = mean(Audience, na.rm = TRUE),
            .by = startYear) %>%
  pivot_longer(cols = -startYear) %>%
  ggplot(aes(x = startYear, y = value, color = name))+
  geom_line()+
  theme_bw()+
  theme(legend.title = element_blank(),
        legend.position = "top",
        legend.background = element_blank(),
        plot.title = element_text(hjust = 0.5))+
  labs(x = "Year", y = "Mean Score",
       title = "Rotten Tomatoes ratings over time")

ggsave("./plots/rt_ratings_over_time.png", width = 5, height = 4)
```

```{r, fig.width=5, fig.height=4}
genres_long %>%
  filter(n > 2000) %>%
  group_by(startYear, genres) %>%
  summarise(score = mean(tomatoesaudience, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = startYear, y = score, color = genres))+
  geom_line()+
  theme_bw()+
  theme(legend.title = element_blank(),
        legend.position = "top",
        legend.background = element_blank(),
        plot.title = element_text(hjust = 0.5))+
  labs(x = "Year", y = "Audience Score",
       title = "Rotten Tomatoes ratings over time by genre")

ggsave("./plots/rt_genre_ratings_over_time.png", width = 5, height = 4)
```

Difference Rotten Tomatoes and IMDB
```{r, fig.width=5, fig.height=4}
imdb_tomatoes %>%
  select(year = startYear, IMDB = averageRating, RT = tomatoesaudience) %>%
  drop_na() %>%
  mutate(RT = RT / 10) %>%
  pivot_longer(cols = -year) %>%
  ggplot(aes(x = value, color = name, fill = name))+
  geom_density(alpha = .5)+
  theme_bw()+
  theme(legend.title = element_blank(),
        legend.position = "top",
        legend.background = element_blank(),
        plot.title = element_text(hjust = 0.5))+
  labs(x = "Score", y = element_blank(),
       title = "Rating distribution: IMDB vs Rotten Tomatoes*",
       caption = "* RT score divided by 10")

ggsave("./plots/imdb_rt_rating_distribution.png", width = 5, height = 4)
```

```{r, fig.width=5, fig.height=4}
imdb_tomatoes %>%
  select(year = startYear, IMDB = averageRating, RT = tomatoesaudience) %>%
  drop_na() %>%
  mutate(RT = RT / 10) %>%
  pivot_longer(cols = -year) %>%
  summarise(value = mean(value), .by = c(year, name)) %>%
  ggplot(aes(x = year, y = value, color = name))+
  geom_line()+
  theme_bw()+
  theme(legend.position = "top",
        plot.title = element_text(hjust = 0.5))+
  labs(x = "Year", y = "Score", color = "",
       title = "Ratings over time: IMDB vs Rotten Tomatoes*",
       caption = "* RT score divided by 10")

ggsave("./plots/imdb_rt_ratings_over_time.png", width = 5, height = 4)
```

### Regression
```{r}
reg1 <- genres_long %>%
  filter(n > 2000) %>%
  lm(tomatoes_diff ~ genres, data = .)

library(stargazer)
library(webshot)

stargazer(reg1, type = "text",
          omit.stat = c("ser", "f"), 
          single.row = FALSE, 
          intercept.bottom = FALSE,
          no.space = TRUE)

```

```{r}
imdb_tomatoes %>%
  select(title = primaryTitle, year = startYear, votes = numVotes, rating = tomatoesaudience) %>%
  #filter(votes > 50000) %>%
  drop_na() %>%
  lm(rating ~ votes, data = .) %>%
  summary()

imdb_tomatoes %>%
  select(title = primaryTitle, year = startYear, votes = numVotes, rating = tomatoesaudience) %>%
  #filter(votes > 50000) %>%
  drop_na() %>%
  ggplot(aes(x = votes, y = rating))+
  geom_density_2d_filled()+
  scale_x_log10()+
  theme_bw()+
  theme(legend.position = "none")
```

## Reddit Post
A few days ago I came across the Rotten Tomatoes score for the new (Godzilla x Kong movie)[https://www.rottentomatoes.com/m/godzilla_x_kong_the_new_empire] and was intrigued by the large discrepancy between the critics' score (54%) and the audience score (92%). 

I took a list of films from the (IMDb Non-Commercial Datasets)[https://developer.imdb.com/non-commercial-datasets/], filtered to include only films from the 1980s and later, and with at least 10,000 reviews. This gave me a dataset of about 10,000 movies. I then used the [mdblist](mdblist.com) API to get the Rotten Tomatoes score for each film.  I then used R and the tidyverse packages to create the plots.

[1] Rating difference by genre: Critics seem to love horror movies, while audiences like action movies more. Maybe audiences like some stupid but funny movies that critics don't (like the Godzilla x Kong movie).
[2] Distribution of Rating Difference: Critics' scores have a wider spread. Audiences do not give bad reviews as often. Maybe a bad film just isn't worth giving a rating to.
[3] Ratings over time: Films seem to have gotten better since around 2010. There is also a fairly large gap between audience and critics' scores in the 90s and 00s.
[4] Ratings over time by genre: The audience ratings for the four most popular genres show that drama is always at the top. The difference between the genres seems to be decreasing over time.

## Other
```{r}
imdb_tomatoes %>%
  select(title = primaryTitle, year = startYear, votes = numVotes, rating = tomatoesaudience) %>%
  filter(votes > 50000) %>%
  drop_na() %>%
  arrange(desc(rating), desc(votes))
```

Reddit Comment request: List of movies with large difference between critics and audience.
```{r}
imdb_tomatoes %>%
  select(imdb_id = tconst, title = primaryTitle, year = startYear, imdb_votes = numVotes, critics = tomatoes, audience = tomatoesaudience) %>%
  mutate(tomatoes_diff = critics - audience) %>%
  drop_na() %>%
  filter(imdb_votes > 50000) %>%
  arrange(desc(abs(tomatoes_diff))) %>%
  head(500) %>%
  select(-imdb_votes) %>%
  mutate(title = str_trunc(title, width = 30, side = "right")) %>%
  stargazer(type = "text", summary = FALSE)
```
